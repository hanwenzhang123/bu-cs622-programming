Q: What do we need when we plan to create something complicated?
A: start with a design first, then create different components and put it together
A: First, we would identify the product or the information of the project that we're going to build in, and then gather some information about it
A: ideally whatever user stories, what are the what is the business contacts, from that business context, and you can start to derive out the architecture

software components are written as a functional unit, you create a function you write some code in it and you work with.
we do some researchers and create a plan, and this, this leads to the introductions of object oriented Program.

variable, attribute, property, field
function, method, routine, sub routine


OOP
In object oriented programs, we have a class, class is the source of the plan, and then we are instantiate a class.
And this creates an object, so the object is the implementation of the class that is physically available 
physically available: some place in the memory in the RAM is occupied for that 
From the JVM to RAM, it occupies some space -> only when the class is instantiated, and the object is created

constructor
At least one constructor, all the classes are sub-class of an object
super() - call parent consturctor, the first statements of every constructor is called to the patent class constructors
this() - refers to the constructor of the class

global variables
- immediately after we define class
- define them inside the constructor
- leave them empty, call them in the method

static
- global variable/method shared among all the instances(objects) of class

naming convention
https://www.javatpoint.com/java-naming-conventions
- class name: CapitalLetter
- object name (instance of a class): lowercase
- method name: camelCase
- variable name: camelCase
- final name: UPPERCASE
- package name: lowercase


access control
private: only available within the class, not outside the class
default: package access, member in another class but same package
protected: member in superclass in differnt package and same package
public: different package and different package


OOP Concepts
Encapsulation
- usually all class parameters will be defined as private, and we use getter and setter methods to access them
- getter/setter hides the unsafe access to the class parameters/field

Inheritance
- extends
- reason: lots of code is repetition - inheritance defines a relationship between class and common attributes.
- a subclass inherits everything, but can provide a new definition to a method call overriding

Polymorphism
- allow current part of the system to interact with a new object without concern for specific properties of the new object
- hiding the details in communication, do not go into the details
- it has the ability that an object can take many form
- a class that can pass "is a" test is considered to be polymorphic - newCar is a Car, newCar is a ElectricCar

Abstraction
- hiding implementation details from the user
Abstract Class: can not be instantiated, but its inherited class can



Downcasting vs Upcasting
- upcasting: parent to be a child
- downcasting(raise error): child to be parent, but child has more details so can not be parent






